<script type="text/javascript" src="https://images-na.ssl-images-amazon.com/images/G/01/javascripts/lib/jquery/jquery-1.3.2.min._V244049497_.js"></script>
	<script type="text/javascript" src="https://images-na.ssl-images-amazon.com/images/G/01/javascripts/lib/jquery/jquery-ui-1.8.11.full.min.js"></script>
	<script>
		(function($){
		$.widget("custom.autoCompleteBold", $.ui.autocomplete, {
		_renderItem: function(ul, item) {
		var term = $.trim(this.term);
		//match input term to each result and apply strong tag
		var boldedHTMLResults = item.label.replace(new RegExp("(?![^&;]+;)(?!<[^<>]*)(" + term.replace(/([\^$\(\)\[\]\{\}\*\.\+\?\|\\])/gi, "\$1") + ")(?![^<>]*>)(?![^&;]+;)", "gi"), "<strong>$1</strong>");
		return $( "<li></li>" )
		.data( "item.autocomplete", item )
		.addClass(this.options.liClass || "")
		.append( $( "<a></a>" ).html( boldedHTMLResults ) )
		.appendTo( ul );
		}
		});
		}(jQuery));
		</script>
	<script type="text/javascript" src="https://images-na.ssl-images-amazon.com/images/G/01/omaha/javascript/jqueryAutocomplete-1-1-custom._V400505187_.js"></script>
	<script type="text/javascript">jQuery.noConflict();</script>

	<!--[if lt IE 9]>

	<script type="text/javascript" src="https://images-na.ssl-images-amazon.com/images/G/01/omaha/js/html5shiv._V1378307129_.js"></script>

	<![endif]-->
	<script type="text/javascript">
		function setCookie(c_name,value,expiredays)
		{
		var exdate=new Date();
		exdate.setDate(exdate.getDate()+expiredays);
		document.cookie=c_name+ "=" +escape(value)+
		((expiredays==null) ? "" : ";expires="+exdate.toGMTString());
		}
		function getCookie(c_name)
		{
		if (document.cookie.length>0)
		{
		c_start=document.cookie.indexOf(c_name + "=");
		if (c_start!=-1)
		{
		c_start=c_start + c_name.length+1;
		c_end=document.cookie.indexOf(";",c_start);
		if (c_end==-1) c_end=document.cookie.length;
		return unescape(document.cookie.substring(c_start,c_end));
		}
		}
		return "";
		}
		function deleteCookie ( cookie_name )
		{
		var cookie_date = new Date ( );  // current date & time
		cookie_date.setTime ( cookie_date.getTime() - 1 );
		document.cookie = cookie_name += "=; expires=" + cookie_date.toGMTString();
		}
		</script>

	<link href="https://images-na.ssl-images-amazon.com/images/G/01/omaha/css/shoveler._V1397624657_.css" type="text/css" rel="stylesheet" />

	<script type="text/javascript">
		function FreshShoveler(shovelerId) {
			this.id = shovelerId;
			this.shoveler = jQuery("#"+shovelerId);
		this.type = FreshShovelerMeta.ShovelerTypes[getParam(this.shoveler, "type")];
		if(null != this.type) {
			this.header = getParam(this.shoveler, "header");
			this.footer = getParam(this.shoveler, "footer");
			this.footerTarget = getParam(this.shoveler, "footerTarget");
			this.isMinDisplay = getParam(this.shoveler, "isMinDisplay");
			this.displayType = getParam(this.shoveler, "displayType");
			if (isEmpty(this.displayType)) { this.displayType = 'standard';}
			this.items = null;
			this.capacity = 0;
			this.perItemMargin = 0;
			this.currentItem = 0;
			this.currentPage = 0;
			this.pageCount = 0;
			this.paginatorGutter = 50; // hero will overwrite this.
			this.firstLoad = true;
			// hero uses a custom load function.
			if('function' != typeof this.type.load) {
				this.load = FreshShovelerMeta.loadFreshShoveler;
			} else {
				this.load = this.type.load;
			}
			this.getExtraParams = this.type.getParams;
			this.getItems = this.type.getItems;
			this.populateItems = FreshShovelerMeta.populateItems;
		} else {
		this.load = function() {
		// do something to log bad widget type? otherwise just keep empty (js makes a fuss trying to call a null function)
		};
		}
		this.bindPaginationEvents = function() {
			var s = this;
		this.shoveler.find("div.backButton").click(function() { FreshShovelerMeta.showPrev(s); return false; });
		this.shoveler.find("div.nextButton").click(function() { FreshShovelerMeta.showNext(s); return false; });
		};
		}
		// getting in the habit of keeping namespace clean by introducing as few global vars as possible.
		var FreshShovelerMeta = {
			shovelerTemplate: jQuery("<h2/><div class='body'><div class='shovelerPagination'>Page <span class='currentPage'>0</span> of <span class='pageCount'>0</span></div><div class='backButton'/><div class='shovelerItems'/><div class='nextButton'/></div><div class='footer'></div>"),
			loadingImage: jQuery("<img src='https://images-na.ssl-images-amazon.com/images/G/01/ui/loadIndicators/loading-large.gif' class='loading' alt='Loading...'/>"),
			ShovelerTypes: {
		// SEARCH SHOVELER takes a search query string via <input type='hidden' name='query' value='[query]' />
			search: {
				itemWidth: 137,
				getParams: function() { this.query = getParam(this.shoveler, "query"); },
				getItems: function() {
					var s = this; // hooray js scoping!
					var asin = getParam(this.shoveler, "asin");
					var action = "shovelerSearch?";
					if(asin != null) {
					action = "shoveler?action=search&";
					}
					jQuery.get(action + this.query + "&source=" + s.id, function(ajax) {
						if(jQuery.trim(ajax) == "") { // hide widget if there are no items
						s.shoveler.hide();
						} else {
						s.populateItems(ajax);
						FreshShovelerMeta.arrangeItems(s);
						
						jQuery(window).resize(function() { FreshShovelerMeta.arrangeItems(s); });
						s.bindPaginationEvents();
						FreshShovelerMeta.tagItems(s);
						FreshShovelerMeta.checkAsins(s);
						}
					});
				}
			},
			// LIST SHOVELER takes a list id via <input type='hidden' name='listId' value='[id]' />
			list: {
			itemWidth: 137,
			getParams: function() { this.listId = getParam(this.shoveler, "listId"); },
			getItems: function() {
				var s = this; // hooray js scoping!
		jQuery.get("shoveler?action=list&listId="+this.listId+"&source="+s.id, function(ajax) {
			if(jQuery.trim(ajax) == "") { // hide widget if there are no items
		s.shoveler.hide();
		} else {
			s.populateItems(ajax);
			FreshShovelerMeta.arrangeItems(s);
			
			jQuery(window).resize(function() { FreshShovelerMeta.arrangeItems(s); });
			s.bindPaginationEvents();
						FreshShovelerMeta.tagItems(s);
			FreshShovelerMeta.checkAsins(s);
		}
		});
			}
			},
			// HERO WIDGET
			hero: {
				itemWidth: 110,
				heroTemplate: jQuery("<h1/><div class='heroSpotContainer' /><div class='heroShoveler'><table class='heroShoveler'><tr><td class='backButton'></td><td class='shovelerItems'></td><td class='nextButton'></td></tr></table></div>"),
				load: function() {
					this.listId = getParam(this.shoveler, "listId");
				this.headline = getParam(this.shoveler, "headline");
				this.paginatorGutter = 15;
					
					this.shoveler.append(FreshShovelerMeta.ShovelerTypes.hero.heroTemplate.clone());
					this.shoveler.find(".shovelerItems").append(FreshShovelerMeta.loadingImage.clone());
					this.shoveler.find("h1").text(this.headline);
					this.getItems();
				},
				getItems: function() {
					var s = this;
					jQuery.get("shoveler?action=hero&listId="+this.listId+"&source="+s.id, function(ajax) {
						if(jQuery.trim(ajax) == "") { // hide widget if there are no items
							s.shoveler.hide();
						} else {
							var response = jQuery(ajax);
							var heroSpots = response.filter("table.heroSpot");
							heroSpots.hide();
							s.shoveler.find(".heroSpotContainer").append(heroSpots);
							s.populateItems(response.filter("div.shovelerItem"));
							s.items.find(".productImage").click(function(event) {
								var asin = jQuery(event.target).parents("div.shovelerItem").find("input[name='expectedAsin']").val();
								var targetHeroSpot = jQuery("#heroSpot_"+asin);
								targetHeroSpot.siblings().fadeOut(300);
								targetHeroSpot.fadeIn(300);
							});
							jQuery(s.items[0]).find(".productImage").click();
							
							FreshShovelerMeta.arrangeItems(s);
							jQuery(window).resize(function() { FreshShovelerMeta.arrangeItems(s); });
							s.bindPaginationEvents();
		FreshShovelerMeta.tagItems(s);
		FreshShovelerMeta.checkAsins(s);
						}
					});
				}
			},
			// DID YOU FORGET SHOVELER generates items from customer's past purchases, with some bestsellers & magazines mixed in
			didYouForget: {
				itemWidth: 137,
				getItems: function() {
			var s = this;
			jQuery.get("DidYouForgetWidget?source=shovelerjs", function(ajax) {
				if(jQuery.trim(ajax) == "") { // hide widget if there are no items
		s.shoveler.hide();
		} else {
		s.populateItems(ajax);
		FreshShovelerMeta.arrangeItems(s);
		
		jQuery(window).resize(function() { FreshShovelerMeta.arrangeItems(s); });
		s.bindPaginationEvents();
						FreshShovelerMeta.tagItems(s);
		FreshShovelerMeta.checkAsins(s);
		}
			});
			}
			},
			// FREE GIFT SHOVELER takes items out of the page (loaded synchronously)
			freeGift: {
			itemWidth: 137,
			getItems: function() {
				var s = this;
				var items = this.shoveler.find(".itemsToDisplay").children();
				if(items.length > 0) {
				s.populateItems(items);
				FreshShovelerMeta.arrangeItems(s);
				jQuery(window).resize(function() { FreshShovelerMeta.arrangeItems(s); });
				s.bindPaginationEvents();
					FreshShovelerMeta.tagItems(s);
		FreshShovelerMeta.checkAsins(s);
				}
				}
			},
			zeitgeist: {
			itemWidth: 137,
			getParams: function() {
		this.rankType = getParam(this.shoveler, "rankType");
		this.listId = getParam(this.shoveler, "listId");
		},
			getItems: function() {
		var s = this; // hooray js scoping!
		var args = {
		action: 'zeitgeist',
		listId: this.listId,
		rankType: this.rankType,
		source: s.id
		};
		var success = function(ajax) {
		if(jQuery.trim(ajax) == "") { // hide widget if there are no items
		s.shoveler.hide();
		} else {
		s.populateItems(ajax);
		FreshShovelerMeta.arrangeItems(s);
		jQuery(window).resize(function() { FreshShovelerMeta.arrangeItems(s); });
		s.bindPaginationEvents();
		FreshShovelerMeta.tagItems(s);
		FreshShovelerMeta.checkAsins(s);
		}
		};
		jQuery.get("shoveler", args, success);
			}
			},
			// ASIN LIST SHOVELER takes an arbitrary list of asins, either from the url path or from an input
			asinList: {
			itemWidth: 137,
			getItems: function() {
			var s = this;
			if(this.isMinDisplay == null) { this.isMinDisplay = "false"; }
			if(this.isMinDisplay) {
				//isMinDisplay appears to never be used/
				this.shoveler.find("img.loading").css("top", "60px");
			this.shoveler.find("div.body").css("height", "150px");
			this.shoveler.find("div.backButton, div.nextButton").css("top", "65px");
			}
			
			var suppressProductLink = getParam(this.shoveler, "suppressProductLink");
			if(suppressProductLink == null) { suppressProductLink = "false"; }
			var rawParams = window.location.search.substr(1).split("&");
			var asins = getParam(this.shoveler, "asins");
			if(asins == null || asins == "") {
				for(var i = 0; i < rawParams.length; i++) {
				var pair = rawParams[i].split("=");
				if(pair[0] == "asins") {
					asins = pair[1];
					break;
				}
				}
			}
		var uid = null;
		for(var i = 0; i < rawParams.length; i++) {
		var pair = rawParams[i].split("=");
		if(pair[0] == "id") {
		uid = pair[1];
		break;
		}
		}
			jQuery.get("shoveler",
				{ action: "asinlist", isMinDisplay: this.isMinDisplay, suppressProductLink: suppressProductLink, asins: asins, uid: uid },
				function(ajax) {
					if(jQuery.trim(ajax) == "") { // hide widget if there are no items
			s.shoveler.hide();
			} else {
			s.populateItems(ajax);
			FreshShovelerMeta.arrangeItems(s);
			
			jQuery(window).resize(function() { FreshShovelerMeta.arrangeItems(s); });
			s.bindPaginationEvents();
							FreshShovelerMeta.tagItems(s);
			if(!s.isMinDisplay) { FreshShovelerMeta.checkAsins(s); }
			}
				}
			);
			}
			},
			},
			loadFreshShoveler: function() {
				if(null != this.getExtraParams) { this.getExtraParams(); }
			this.shoveler.wrap("<div class='"+ this.displayType+"'></div>");
			// create shoveler framework
			this.shoveler.append(FreshShovelerMeta.shovelerTemplate.clone());
			this.shoveler.find(".shovelerPagination").hide();
			this.shoveler.find(".shovelerItems").append(FreshShovelerMeta.loadingImage.clone());
			this.shoveler.find("h2").text(this.header);
			this.getItems();
			},
		populateItems: function(items) {
			var s = this;
			s.shoveler.find(".loading").remove();
			s.shoveler.find(".shovelerItems").append(items);
			s.items = s.shoveler.find(".shovelerItem");
			s.items.each(function(i) {
			jQuery(this).attr("id", s.id+"Item_"+i);
			});
			},
			arrangeItems: function(s) {
				if(s.displayType != 'underCart') {
					var containerWidth = s.shoveler.find(".shovelerItems").width();
				s.capacity = Math.floor(containerWidth / s.type.itemWidth) - 1;
				var totalMargin = containerWidth - (s.capacity * s.type.itemWidth);
				s.perItemMargin = totalMargin / (s.capacity + 1);
			s.currentItem = 0;
			s.currentPage = 0;
			s.pageCount = Math.ceil(s.items.length / s.capacity);
			
			FreshShovelerMeta.scrollItems(s);
				s.shoveler.find(".pageCount").empty().append(s.pageCount);
				s.shoveler.find(".shovelerPagination").show();
				
		if (s.firstLoad) {
		var bodyHeight =  s.shoveler.find(".body").height();
		
			if (s.shoveler.find(".pleaseSignIn").size() > 0) {
			bodyHeight += 10;
			}
			
			if (s.shoveler.find(".availabilityMessage").size() > 0) {
			bodyHeight += 20;
			}
			s.shoveler.find(".body").height(bodyHeight);
			s.firstLoad = false;
		}
				} else {
					
			s.items.each(function(i) {
				if (i > 5) { jQuery("#" + s.id+"Item_"+i).hide(); }
			});
				}
			},
			adjustShovelerHeight: function(s) {
				var maxShovelerItemHeight = 0;
				s.shoveler.find("div.shovelerItem").each(function() {
					var height = jQuery(this).height();
					if(height > maxShovelerItemHeight) {
						maxShovelerItemHeight = height;
					}
				});
				if(s.type == FreshShovelerMeta.ShovelerTypes.hero) {
			var heroSpotHeight = s.shoveler.find(".heroSpotContainer").height();
			s.shoveler.css("height", heroSpotHeight + maxShovelerItemHeight + 55);
				} else if(s.displayType != 'underCart') { // this will support all standard shovelers
					s.shoveler.find("div.body").css("height", maxShovelerItemHeight);
				}
			},
			showPrev: function(s) {
			s.currentPage = (s.currentPage + s.pageCount - 1) % s.pageCount; // pre-emptively handle negative mod
			FreshShovelerMeta.scrollItems(s);
			},
			showNext: function(s) {
				s.currentPage = (s.currentPage + 1) % s.pageCount;
				FreshShovelerMeta.scrollItems(s);
			},
			scrollItems: function(s) {
				var autoWidthAdjust = 0;
				if(s.type == FreshShovelerMeta.ShovelerTypes.hero) {
					autoWidthAdjust = s.shoveler.offset().left;
				}
			s.items.hide();
			var startIndex = s.currentPage * s.capacity,
			endIndex = Math.min(s.items.length, startIndex + s.capacity),
			position = 0;
			for(var i = startIndex; i < endIndex; i++) {
				jQuery(s.items[i]).css({ left: (s.type.itemWidth + s.perItemMargin) * position + s.perItemMargin + s.paginatorGutter + autoWidthAdjust}).show();
				position++;
			}
			s.shoveler.find(".currentPage").empty().append(s.currentPage+1);
			},
			tagItems: function(s) {
				var tag = getParam(s.shoveler, "csTag");
				if (tag) {
				s.shoveler.find("div.shovelerItem").each(function() {
				var item = jQuery(this);
					var pfref = item.attr("id");
					item.find("a").each(function() {
						var linkTag = jQuery(this);
						var currentHref = linkTag.attr("href");
						linkTag.attr("href",currentHref+tag+"&pf_ref="+pfref+"_link"+"&ref_=cs_"+pfref);
					});
				
				s.shoveler.find("input.csTag").each(function() {
					var tagItem = jQuery(this);
							item.find("form.addToCartForm").append(jQuery("<input type='hidden' name='"+tagItem.attr("name")+"' value='" + tagItem.attr("value")+"'/>"));
				});
				item.find("form.addToCartForm").append(jQuery("<input type='hidden' name='pf_ref' value='" + pfref+"_cart'/>"));
			item.find("form.addToCartForm").append(jQuery("<input type='hidden' name='ref_' value='cs_" + pfref+"'/>"));
				});
				}
			},
			checkAsins: function(s) {
			s.shoveler.find("div.shovelerItem").each(function() {
			var item = jQuery(this);
			var expectedAsin = item.find("input[name='expectedAsin']").attr("value");
			var addToCartAsin = item.find("input[name='addToCartAsin']").attr("value");
			if(expectedAsin != addToCartAsin) {
			jQuery.get("ping?badShovelerAsins&expected="+expectedAsin+"&actual="+addToCartAsin+"&shoveler="+s.id);
			item.find("form.addToCartForm input[name='asin']").attr("value", expectedAsin);
			}
			});
			},
			loadAllShovelers: function() {
				var widgets = jQuery("div.shovelerWidget, div.heroWidget");
			if(widgets.length > 0) {
			widgets.each(function(i) {
			var targetId = jQuery(this).attr("id");
			var widget = new FreshShoveler(targetId);
			widget.load();
			});
			}
			}
		}
		function getParam(parent, name) { return parent.find("input[name='"+name+"']").attr("value"); }
		function isEmpty(string) { string = jQuery.trim(string); return (string == null || string == ""); }
		</script>
	<script type="text/javascript">
		jQuery(document).ready(function() {
			jQuery(".recipeWidget").each(function(index) {
			var widget = jQuery(this);
			var recipeIdsString = widget.html();
				jQuery.post("recipeWidget", { recipeIds: recipeIdsString },
				function(data) {
				if (data.length > 0) {
				widget.html(data);
				widget.show();
				truncateRecipeTitles(widget);
				}
				}
			);
			});
		});
		function truncateRecipeTitles(widget) {
			widget.find(".text").each(function(index) {
				var textDiv = jQuery(this);
				var n = parseInt(textDiv.css("line-height"));
				var text = textDiv.html();
			
			if (textDiv.height() == n) {
				// center when one line
				textDiv.css("margin-top", n +"px");
			} else if (textDiv.height() > 2*n) {
				// add ellipsis
				text = text + "...";
				textDiv.html(text);
			}
			// reduce lenght until it fits
			while (textDiv.height() > 2*n) {
				text = text.substr(0, text.length - 4) + "...";
				textDiv.html(text);
			}
			textDiv.css("max-height", (2*n) + "px");
			textDiv.css("overflow", "hidden");
				});
		}
		</script>
	<script language="javascript" type="text/javascript">
		Function.prototype.bind = Function.prototype.bind || function (thisp) {
		var fn = this;
		return function () {
		return fn.apply(thisp, arguments);
		};
		};
		function submitOnlyOnce(theForm){
		if (jQuery(window.parent.jQuery(".inCart")).length) {
		var asin = jQuery(theForm.asin).val();
		var quantity = jQuery(theForm.quantity).val();
		if (quantity == 0) {
		jQuery(window.parent.jQuery("." + asin + "-asin")).trigger("showPastPurchaseTag-" + asin);
		}
		}
			jQuery(jQuery(theForm).find("button[type=submit], input[type=image], input[type=submit], input[type=button]").attr("disabled", "disabled"));
		}
		function disableLink(theLink) {
			jQuery(theLink).click(function(e) { return false; });
		}
		function refreshShoppingCart() {
			jQuery("#shopping-cart").attr("src", "ShoppingCartView");
		}
		var cartEventListeners = [];
		function addCartEventListener(listener){
			cartEventListeners.push(listener);
		}
		function cartReloadEvent(cartInfo){
			for(index in cartEventListeners) {
				cartEventListeners[index](cartInfo);
				}
		}
		function truncateTitle(title) {
		var height = title.height();
		title.css("height", "auto");
		title.css("max-height", 200);
		title.css("overflow", "hidden");
		var anchor = title.find("a"),
		text = anchor.text();
		while (text.length > 0 && title.height() > height) {
		text = text.substr(0, text.length - 1);
		anchor.html(text + "&#8230");
		}
		title.css("max-height", "30px");
		}
		var warnOfInvalidItems = true;
		function updateAddAllToCartButton(event) {
		var validList = "";
		var invalidList = "";
		
		jQuery(".listItem").each(function(index) {
		var item = jQuery(this);
		var conflictInput = item.find("input[name='conflictWithSlot']");
		if (item.find(".itemUnavailableText").size() > 0 || item.find(".discontinued").size() > 0) {
		// Ignore unavailable and discontinued items
		} else if (conflictInput.size() == 0 || conflictInput.val() == "false") { // skip invalid items
		var quantity = item.find(".addToCart input[name='quantity']");
		
		if (quantity.size() > 0 && quantity.val() > 0) {
		var asin = item.attr("id");
		var merchantId = item.find(".addToCart input[name='merchantId']").val();
		validList += asin + "|" + quantity.val() + "|" + merchantId + ",";
		}
		} else {
			invalidList +="<li>" + item.find(".itemTitle a").html() + "</li>";
		}
		});
		jQuery(this).find("input[name='itemDetails']").val(validList);
		// show message if invalid items cannot be added
		if (warnOfInvalidItems && invalidList != "") {
		event.preventDefault();
		var message = "These items are not available for delivery <strong>" + jQuery("#headerNav #selectday a").html() + "</strong> and will NOT be added to your cart:<ul>";
				
				message += invalidList;
		message +="</ul>";
		message += "<button id='addAllAvailableItemsToCart'>Continue without These Items</button>&nbsp;&nbsp;";
		message += "<button class='nevermind'>Nevermind</button/>";
		
		showOnDemandLightboxWithContent(message, jQuery(this));
		
		jQuery("#addAllAvailableItemsToCart").click(function() {
		warnOfInvalidItems = false;
		jQuery("#addAllToCart").submit();
		hideLightbox();
		});
		}
		
		warnOfInvalidItems = true;
		}
		function showAddToCartLightbox(form, message) {
			showOnDemandLightboxWithContent(message, form, function() {
		var lightbox = jQuery("#lightbox");
		var atcButtons = lightbox.find("#addToCartButtons");
		var totalWidth;
		if (atcButtons.size() > 0) {
			totalWidth = atcButtons.find("form[name='UseSlotAndAddToCart']").width()
			+ atcButtons.find("form[name='ClearSlot']").width()
			+ atcButtons.find(".nevermind").width();
		} else {
			totalWidth = 400;
		}
		lightbox.width(Math.max(300, totalWidth + 110));
		lightbox.find(".itemTitle").width(lightbox.width() - 150);
		});
		}
		function setPostAddCookie(e) {
		document.cookie="freshPostSlotAdd=true;"
		return true;
		}
		function removePostAddCookie() {
		var cookie_date = new Date ();
		cookie_date.setTime ( cookie_date.getTime() - 1 );
		document.cookie = "freshPostSlotAdd=; expires=" + cookie_date.toGMTString();
		}
		function showLoadingSpinner(event){
			var spinnerTextList = new Array(
					"We're processing your order.",
					"More items can be added after your order is placed.",
					"Download our mobile apps to shop any time, anywhere.",
					"Discover local favorites on your city's Spotlight page.",
					"We offer a 100% grocery satisfaction guarantee.",
					"Get your shopping done fast with one-click recipes.",
					"Thank you for shopping on AmazonFresh.",
					"Easily find your favorites in Past Purchases.",
					"We look forward to serving you.",
					"Your order will arrive in temperature-controlled bags.",
					"Please leave your porch light on for our drivers.",
					"Save time by creating Your Lists.");
			
			/* Using a short timeout hack to ensure that we do not encounter freezing GIF problems in IE on form post -npprabhu */
			setTimeout(function() {
				var isInIframe = window.location != window.parent.location;
				var spinnyBlock;
				if (isInIframe) {
					spinnyBlock = jQuery("#orderProcessing", window.parent.document);
				} else {
					spinnyBlock = jQuery("#orderProcessing");
				}
				
				spinnyBlock.show();
				
				var spinnyText = spinnyBlock.find("#spinnerText");
				var txtCounter = 0;
				setInterval(function(){
					txtCounter++;
					spinnyText.html(spinnerTextList[txtCounter]);
					if(txtCounter == (spinnerTextList.length - 1)){
						txtCounter = -1;
					}
				}, 5000);
				
				var spinnyImage = spinnyBlock.find("#greenTruck");
				var imgCounter = 0;
				var imgPos = parseInt(spinnyImage.css("left"));
				setInterval(function(){
					imgCounter++;
					spinnyImage.css("left", imgPos + (200 * imgCounter));
					if(imgCounter == 2) {
						imgCounter = -1;
					}
				}, 1000);
				
			}, 50);
		}
		jQuery(document).ready(function() {
		handleDeliveryNotes();
		jQuery("#placeOrderForm, form[action='UpdateOrder']").submit(showLoadingSpinner);
		jQuery(".buying .variationRadio").live('click',changeVariationEventHandler);
		jQuery(".smallProduct .variationRadio ").live('click',changeVariationEventHandler);
		jQuery(".shovelerItem .variationRadio ").live('click',changeVariationEventHandler);
		jQuery(".mobileBody .variationRadio ").live('click',changeVariationMobileEventHandler);
		
		jQuery(document).ajaxError(function(event, request, settings, exception) {
		if (401 === request.status) {
		window.location.href = "/Authenticate?signInSuccessUrl=" + encodeURIComponent(location.pathname);
		return true;
		}
		return false;
		});
		});
		function handleDeliveryNotes() {
		jQuery("#editDeliveryInstructions").click(function() {
		var content = jQuery("#deliveryInstructionsLightboxWrapper");
		showOnDemandLightboxWithContent(content.html());
		attachCustomerDeliveryNotesClipHandler();
		});
		attachCustomerDeliveryNotesClipHandler();
		}
		//Limit customer delivery notes input to 255 characters, as we claim.
		function attachCustomerDeliveryNotesClipHandler() {
		var clipCustomerDeliveryNotes = function(event) {
		var textArea = jQuery('.customerDeliveryNotesInput');
		var textValue =  textArea.val();
		if (textValue.length > 255) {
		textValue = textValue.slice(0, 255);
		textArea.val(textValue);
		textArea.scrollTop(textArea[0].scrollHeight);
		}
		};
		jQuery('.customerDeliveryNotesInput').keydown(clipCustomerDeliveryNotes);
		jQuery('.customerDeliveryNotesInput').keyup(clipCustomerDeliveryNotes);
		jQuery('.customerDeliveryNotesInput').change(clipCustomerDeliveryNotes);
		}
		function changeVariationEventHandler(event) {
		if(event.isPropagationStopped()) return;
		event.stopPropagation();
		$this = jQuery(this);
		var asin_id = $this.attr("value");
		var asin = asin_id.split("_")[0];
		var showItemId = jQuery(this).parent(".variationSelection").parent().find(".var_".concat(asin_id));
		var showItem = jQuery(this).parent(".variationSelection").parent().find(".var_".concat(asin));
		jQuery(this).closest(".variationSelection").parent().find(".variation").hide();
		showItemId.show();
		showItem.show();
		}
		function changeVariationMobileEventHandler(event) {
		if(event.isPropagationStopped()) return;
		event.stopPropagation();
		$this = jQuery(this);
		var asin = jQuery(this).attr("value");
		var showItem = jQuery(this).parents(".variationSelection").parent().find(".var_".concat(asin));
		$this.closest(".variationSelection").parent().find(".variation").hide();
		showItem.show();
		}
		</script>

	<script type="text/javascript" src="https://images-na.ssl-images-amazon.com/images/G/01/omaha/js/searchResultsWidget._V1410555730_.js"></script>

	<script type="text/javascript" src="https://images-na.ssl-images-amazon.com/images/G/01/omaha/js/advertWidget._V1426107391_.js"></script>

	<script type="text/javascript">
		var SingleBuyWidget = {
		loadingImage: jQuery("<img src='https://images-na.ssl-images-amazon.com/images/G/01/ui/loadIndicators/loading-large.gif' class='loading' alt='Loading...'/>"),
		addToCartIfAvailableHandler: function(event) {
		var button = event.target;
		var form = jQuery(button).parents("form");
		event.preventDefault();
		var asin = form.find("input[name='asin']").val();
		var quantity = 1; //The quantity is hardcoded for the SingleBuyWidget
		var ajaxAttrs = {"asin": asin, "quantity": quantity, "addCartRefer": document.URL};
		jQuery(".singleBuyWidget").each(function(index) {
		var widget = jQuery(this);
		var button = widget.find("button[type='submit']");
		button.addClass("singleBuyWaiting");
		button.attr("disabled", "disabled");
		});
		jQuery.ajax({
		type: "post",
		url: "/AvailableForAddToCart?",
		data: ajaxAttrs,
		success: function(data, text) {
		SingleBuyWidget.addToCartEventHandler(event);
		},
		error: function(request, status, error) {
		//TODO What to do?
		jQuery(".singleBuyWidget").each(function(index) {
		var widget = jQuery(this);
		var button = widget.find("button[type='submit']");
		button.removeAttr("disabled");
		button.removeClass("singleBuyWaiting");
		});
		}
		});
		},
		addToCartEventHandler: function (event) {
		event.preventDefault();
		var form = jQuery(event.target).parents("form");
		SingleBuyWidget.addToCartByForm(form);
		},
		addToCartByForm: function (form) {
		var params = ["quantity", "asin", "refId", "qid", "rank"];
		var values = {};
		for(var i = 0; i < params.length; i++) {
		var param = params[i];
		values[param] = form.find("input[name='"+param+"']").val();
		}
		SingleBuyWidget.addToCart(form, values);
		},
		addToCart: function (form, values) {
		jQuery.get("/CartAPI",
		{'action':'addItem', 'quantity':values['quantity'],'asin':values['asin'],'refId':values['refId'],'qid':values['qid'],'rank':values['rank'],'sr':'1-'+values['rank']},
		function(data, textStatus){
		var quantityInCart = parseInt(form.find("input[name='quantityInCart']").val(), 10);
		if(isNaN(quantityInCart)) {
		quantityInCart = 0;
		}
		quantityInCart += 1;
		jQuery(".singleBuyWidget").each(function(index) {
		var widget = jQuery(this);
		var proceedButton = widget.find(".singleBuyProceedButton");
		proceedButton.show();
		proceedButton.find(".singleBuyQuantity").text(quantityInCart + " added to cart");
		var button = proceedButton.find("button[type='submit']");
		button.removeAttr("disabled");
		button.removeClass("singleBuyWaiting");
		var singleBuyAddToCart = widget.find(".singleBuyAddToCart");
		singleBuyAddToCart.hide();
		});
		},
		'html');
		},
		loadAllSingleBuyWidgets: function() {
		jQuery(".singleBuyWidget").each(function(index) {
		var widget = jQuery(this);
		//widget.append(SingleBuyWidget.loadingImage.clone());
		var asin = widget.find("input[name='asin']").attr("value").trim();
		var buttonClass = widget.find("input[name='buttonClass']").attr("value").trim();
		jQuery.get("/singleBuyWidget", { asin: asin, buttonClass: buttonClass },
		function(sbwidget) {
		if(jQuery.trim(sbwidget) == "") {
		widget.hide();
		} else {
		//widget.find(".loading").remove();
		widget.append(sbwidget);
		widget.find("form.singleBuyAddToCartForm button[type='submit']").live('click', SingleBuyWidget.addToCartIfAvailableHandler);
		widget.find("a.singleBuyDisabled").css('cursor', 'pointer');
		}
		});
		});
		}
		}
		jQuery(document).ready(SingleBuyWidget.loadAllSingleBuyWidgets);
		</script>
	<script type="text/javascript">
		var DashBuyWidget = {
		loadingImage: jQuery("<img src='https://images-na.ssl-images-amazon.com/images/G/01/omaha/images/ui/loading-large-transparent.gif' class='loading' alt='Loading...'/>"),
		addToCartEventHandler: function (event) {
		var form = jQuery(event.target);
		DashBuyWidget.addToCartByForm(form);
		event.preventDefault();
		},
		addToCartByForm: function (form) {
		var $form = jQuery(form);
		var request = {};
		jQuery.each($form.find("input[type=hidden]"), function(i, field) {
		$field = jQuery(field);
		request[$field.attr("name")] = $field.val();
		});
		$button = $form.find("button");
		
		$button.hide();
		$form.append(DashBuyWidget.loadingImage.clone());
		jQuery.ajax({
		url: "/CartAPI",
		type: "POST",
		data: request,
		success: function(data, textStatus) {
			$div = $button.parent().closest("div");
			$div.empty();
			jQuery("#alreadyOrderedWrapper").show();
		},
		complete: function(){
		$form.find("img").remove();
		$button.show();
		}
		})
		},
		loadAllDashBuyWidgets: function() {
		jQuery(".dashBuyWidget").each(function(index) {
		var widget = jQuery(this);
		widget.append(DashBuyWidget.loadingImage.clone());
		var asin = widget.find("input[name='asin']").attr("value").trim();
		var buttonClass = widget.find("input[name='buttonClass']").attr("value").trim();
		jQuery.get("/dash/dashBuyWidget", { asin: asin, buttonClass: buttonClass },
		function(sbwidget) {
		if(jQuery.trim(sbwidget) == "") {
		widget.hide();
		} else {
		widget.find(".loading").remove();
		widget.append(sbwidget);
		widget.find("form.dashBuyAddToCartForm").live('submit', DashBuyWidget.addToCartEventHandler);
		widget.find("a.dashBuyDisabled").css('cursor', 'pointer');
		DashBuyWidget.attachMPSelectEventHandlers();
		}
		});
		});
		},
		
		getUrlWithoutBrowseMPParameter: function() {
			var url = parent.location.href;
		var splitURL = url.split("browseMP=");
		
		if (splitURL.length > 1) {
		var splitParams = splitURL[1].split("&");
		url = splitURL[0];
		if (splitParams.length > 1) {
		url +=splitParams[1];
		}
		}
		
		return url;
		},
		
		attachMPSelectEventHandlers: function() {
			jQuery("#dashMpSelect a").click(function(event) {
				event.preventDefault();
				jQuery("#dashMpSelect select").toggle();
			});
			
		jQuery("#dashMpSelect").change(function() {
		var url = DashBuyWidget.getUrlWithoutBrowseMPParameter();
		url += (url.indexOf('?') > -1) ? "&" : "?";
		url += "browseMP=" + jQuery(this).find("select").val();
		parent.location.href = url;
		});
		}
		}
		jQuery(document).ready(DashBuyWidget.loadAllDashBuyWidgets);
		</script>
	<script type="text/javascript">
		function isGateway() {
			var path = window.location.pathname;
		return (path.substr(path.length-8, path.length) == "/Gateway") || (path == "/") || (path == "/str/");
		}
		</script>
	<script type="text/javascript">
		// Fix anything marked with id="dialogBox" or the centeredPopover class to the center of the window
		function centerPopover() {
		var $win = jQuery(window);
		var $popover = jQuery("#dialogBox,.centeredPopover");
		$popover.css({
		'left': ($win.width() - $popover.width()) / 2 + $win.scrollLeft(),
		'top': ($win.height() - $popover.height()) / 2 + $win.scrollTop()
		});
		}
		jQuery(window).scroll(centerPopover);
		jQuery(window).resize(centerPopover);
		jQuery("#dialogBox,.centeredPopover").ready(centerPopover);
		// replace the "hover" menus with "tap" menus for iPads and such
		if ('ontouchstart' in window) {
			jQuery(function($) {
				$("#stripeMenu li:has('.stripeHover') a").click(function() {
					this.parent.toggleClass("expanded");
					return false;
				});
			});
		}
		// now bestsellers tab
		var nowBestsellers = {
			box: null,
			items: null,
			waitInterval: 3000,
			currItem: 0
		};
		jQuery(function() {
		FreshShovelerMeta.loadAllShovelers();
		});
		jQuery(document).ready(function() {
		var $search = jQuery("#topNav").find("input#search, input#searchAutocomplete");
		if (!('placeholder' in document.createElement('input'))) {
		// placeholder is not supported in this browser
			if ('' == $search.val() && !($search.get(0) == document.activeElement)) {
				$search.val('Search');
			}
		$search.focus(searchFieldFocus)
		.blur(searchFieldBlur);
		}
		attachPlaceholders();
		bindQuantityButtonListeners();
		});
		function bindQuantityButtonListeners() {
		jQuery(".quantityButtonInner").live('click',openQuantityPopover);
		jQuery(".quantityDropDownItem").live('click',closeQuantityPopover);
		var hoverTimeout;
		jQuery(".quantityPopoverWrapper").hover(function() {
		clearTimeout(hoverTimeout);
		}, function() {
		var popover = jQuery(this);
		hoverTimeout = setTimeout(resetQuantityBoxes, 5000);
		});
		jQuery(document).click(resetQuantityBoxes);
		jQuery(window).resize(resetQuantityBoxes);
		}
		function searchFieldFocus(event) {
		var field = jQuery(event.target);
		if (field.val() == "Search") {
		field.val("")
		.css("color", "black");
		}
		}
		function searchFieldBlur(event) {
		var field = jQuery(event.target);
		if (field.val() == "") {
		field.val("Search")
		.css("color", "#999999");
		}
		}
		jQuery.fn.simplePopover = function(options) {
		var $ = jQuery;
			var defaults = {
					success: function() {},
					cancel: function() {}
			}
			if (!options) { options = {}};
			var settings = $.extend({}, defaults, options);
			var $alpha = $('#alphaLayer');
			$alpha.addClass('disablePage');
			var $popover = $('<div class="simplePopoverWrapper"><div class="simplePopover">' + this.html() + '</div></div>').appendTo('body');
			var $form = $popover.find("form");
			var closePopover = function() {
		$alpha.removeClass('disablePage');
		$popover.remove();
			}
			var cancel = function() {
				closePopover();
				settings.cancel();
				return false;
			}
			$popover.find(".closeWindow").click(cancel);
			$form.submit(function() {
				var url = $form.attr("action");
				var extraParams = settings.extraParams;
				$.post(url, $form.serialize() + extraParams, function(data, textStatus, xhr) {
					closePopover();
					settings.success(data, textStatus, xhr);
				});
				return false;
			});
			$form.find(":reset").click(cancel);
			return $popover;
		};
		function appendOrReplaceResultsPerPage(link, resultCount) {
		var resultsPerPage = "resultsPerPage";
		var href = link.attr("href");
		var hasResultsPerPage = href.indexOf(resultsPerPage) >= 0;
		if (!hasResultsPerPage){
		var delimiter = (href.indexOf("?") < 0) ? "?" : "&";
		link.attr("href", href + delimiter + resultsPerPage + "=" + resultCount);
		} else {
		link.attr("href", href.replace(/resultsPerPage=\d*/g, resultsPerPage + "=" + resultCount));
		}
		};
		function calculateSearchResultCount() {
		var resultSpaceWidth = jQuery(window).width() - 30 - 288;
		var searchItemWidth = 162;
		var resultsPerRow = Math.floor(resultSpaceWidth / searchItemWidth);
		var searchResultCount = resultsPerRow * 6;
		return searchResultCount;
		}
		function calculatePPResultCount() {
		var resultSpaceWidth = jQuery(window).width() - 30 - 288;
		var ppItemWidth = 96,
			ppResultsPerRow = Math.floor(resultSpaceWidth / ppItemWidth),
				ppResultCount = ppResultsPerRow * 4;
		return ppResultCount;
		}
		jQuery(document).ready(function() {
		var resultCountInput = jQuery("form#freshSearchForm").find("input[name=resultsPerPage]");
		
		if (resultCountInput.length == 0)
		return;
		var searchResultCount = calculateSearchResultCount();
		resultCountInput.val(searchResultCount);
		var ppResultCount = calculatePPResultCount();
		// any links that go to Search pages, Past Purchases or CouponDetails should have a resultsPerPage parameter
		jQuery("a[href*='/Search']").each(function() {
		appendOrReplaceResultsPerPage(jQuery(this), searchResultCount);
		});
		jQuery("a[href*='Favorites']").each(function() {
			appendOrReplaceResultsPerPage(jQuery(this), ppResultCount);
		});
		
		jQuery("a[href*='/CouponDetails']").each(function() {
		appendOrReplaceResultsPerPage(jQuery(this), ppResultCount);
		});
		
		setResultCountForPastPurchases(ppResultCount);
		
		setupWelcomeMessage();
		});
		function setupWelcomeMessage() {
		jQuery("#refreshwelcome").focus().blur(function() {
		dismissWelcomeMessage();
		});
		}
		function dismissWelcomeMessage() {
		jQuery('#refreshwelcomecontainer').hide();
		jQuery('#refreshwelcomeboxblockout').hide();
		}
		function setResultCountForPastPurchases(resultCount) {
			var anchors = [],
				ppLink = jQuery("#lnk-tab-lists");
			if (ppLink.length > 0) {
				anchors.push(ppLink);
			}
			var ppForm = jQuery("#pastPurchases form#pastPurchasesSearch");
			if (ppForm.length > 0) {
				ppForm.find("input[name=resultsPerPage]").val(resultCount);
			}
			
					var	aisles = jQuery("#pastPurchases div#filterByAisle");
			if (aisles.length > 0) {
				aisles.find("a").each(function(index) {
					anchors.push(jQuery(this));
				});
			}
			
			if (document.location.pathname.indexOf("/MyList") < 0 && document.location.pathname.indexOf("/ViewList") < 0) {
				var pagination = jQuery("#pastPurchases div.pagination");
				if (pagination.length > 0) {
					pagination.find("a").each(function(index) {
						anchors.push(jQuery(this));
					});
				}
			}
		var breadcrumb = jQuery("#breadcrumb");
			if (breadcrumb.length > 0) {
				// remove the first one, as it will be "Amazon Fresh", which doesn't need it.
				breadcrumb.find("a").slice(1).each(function(index) {
			anchors.push(jQuery(this));
			});
			}
			
			for (var i = 0; i < anchors.length; i++) {
		var link = jQuery(anchors[i]),
			href = link.attr("href");
		if (href.indexOf("?") >= 0) {
			link.attr("href", href + "&resultsPerPage=" + resultCount);
		} else {
			link.attr("href", href + "?resultsPerPage=" + resultCount);
		}
			}
		}
		function buildCallOnLoadParameter(functionName, arguments) {
			var parameter = 'callOnLoad=' + functionName;
			for (var i = 0; i < arguments.length; i++) {
				parameter += '-' + arguments[i];
			}
			return parameter;
		}
		function redirectToSecureWithCall(functionName, arguments) {
			var port = location.port ? location.port : '';
			var autoCallParameter = buildCallOnLoadParameter(functionName, arguments);
			var search = (location.search ? location.search + '&' : '?') + autoCallParameter;
			
		if (port == '80') {
		port = '443';
		} else if (port == '8989') {
		port = '8443';
		}
		
		window.location = 'https://' + location.hostname + (port ? ':' + port : '') + location.pathname + search;
		}
		function openQuantityPopover(event) {
		event.stopPropagation();
		var popover = jQuery(this).siblings(".quantityPopoverWrapper");
		jQuery(".quantityPopoverWrapper").removeAttr("style");
		jQuery(".quantityPopoverWrapper").each(function() {
		if (jQuery(this) !== popover) {
		jQuery(this).hide();
		}
		});
		popover.show();
		if (popover.offset().top + popover.height() > jQuery(window).scrollTop() + jQuery(window).height() && popover.offset().top - popover.height() < jQuery(window).scrollTop()) {
		popover.css("height", jQuery(window).scrollTop() + jQuery(window).height() - popover.offset().top);
		popover.css("overflow-y", "scroll");
		}
		else if (popover.offset().top + popover.height() > jQuery(window).scrollTop() + jQuery(window).height()) {
		popover.css("bottom", "-1px");
		popover.css("top", "auto");
		}
		}
		function closeQuantityPopover(event) {
		event.stopPropagation();
		event.preventDefault();
		var newValue = jQuery(this).find("a").text();
		var popover = jQuery(this).parents(".quantityPopoverWrapper");
		popover.find(".quantityDropDownItem").removeClass("selected");
		jQuery(this).addClass("selected");
		var quantityWrapper = popover.parents(".addToCartQuantityWrapper");
		quantityWrapper.find(".quantityButtonPrompt").text(newValue);
		var addToCartForm = quantityWrapper.siblings(".addToCartForm");
		addToCartForm.find(".addToCartQuantity").val(newValue);
		popover.removeAttr("style");
		popover.hide();
		}
		function resetQuantityBoxes(event) {
		if(event.isPropagationStopped()) return;
		jQuery(".quantityPopoverWrapper").removeAttr("style");
		jQuery(".quantityPopoverWrapper").hide();
		}
		function showNewExperienceAddToCart(){
		if(jQuery("#lb-ondemand").children().length == 0) {
		jQuery.get("newShoppingExperience?currentPage=AddToCart", function(data) {
		if(jQuery.trim(data).length>0){
		var target = "target";
		if(data.indexOf(target) == -1 ){
		showOnDemandLightboxWithContent(data);
		jQuery("#lightbox").css("width", 650);
		jQuery("#lightbox").css("border-radius", 10);
		jQuery("#lb-cancel").hide();
		jQuery("#editMultipleButton").click(function() {
		jQuery.get("chooseExperience?legacy=EditOrder", function(data) {
		location.href = "AllOrders";
		});
		});
		jQuery("#completeOrder").click(function() {
		jQuery.get("chooseExperience?legacy=CompleteOrder", function(data) {
		hideLightbox();
		});
		});
		jQuery("#legacyLink").click(function() {
		jQuery.get("chooseExperience?legacy=ShopAcrossRegion", function(data) {
		location.href = "splashDelivery";
		});
		});
		}
		}
		});
		}
		}
		function transitToOrderDetail() {
		jQuery.get("chooseExperience?legacy=EditOrder", function(data) {
		jQuery("#orderDetailForm").submit();
		});
		}
		function transitToOrderDetailFromLink() {
		jQuery.get("chooseExperience?legacy=EditOrderLink", function(data) {
		jQuery("#orderDetailForm").submit();
		});
		}
		function transitToAllOrders() {
		jQuery.get("chooseExperience?legacy=EditOrderLink", function(data) {
		location.href = "AllOrders";
		});
		}
		function setChosenExperienceAndGoToAmazon(ref) {
		var url = 'chooseExperience?legacy=ShopOnAmazon';
		jQuery.get(url, function(data) {
		location.href = ref;
		});
		}
		function goToAmazonFromLink(ref) {
		var url = 'chooseExperience?legacy=ShopOnAmazonLink';
		jQuery.get(url, function(data) {
		location.href = ref;
		});
		}
		// Start AddToCartIfAvailable specific functions
		function addToCartAvailable(button) {
		showNewExperienceAddToCart();
			return addToCartAvailableAjax(jQuery(button).parent());
		}
		function addToCartAvailableAjax(form) {
		var asin = form.find("input[name='asin']").val();
			var quantity = form.find("input[name='quantity']").val();
			if (quantity == null) quantity = 1;
			
			var ajaxAttrs = {"asin": asin, "quantity": quantity, "addCartRefer": document.URL};
			
			jQuery.ajax({
				type: "post",
				url: "/AvailableForAddToCart?",
				data: ajaxAttrs,
				success: function(data, text) {
					if (data.indexOf('id="addToCartLightbox"') >= 0) {
						showAddToCartLightbox(form, data);
					} else {
						form.submit();
					}
				},
				error: function(request, status, error) {
					form.submit();
				}
			});
			
			return false;
		};
		//End AddToCartIfAvailable specific function
		// For browsers (such as IE8 and IE9) that do not support HTML5's placeholder feature
		function attachPlaceholders() {
		if ('placeholder' in document.createElement('input')) {
		return;
		}
		
				jQuery("#welcome input").each(function() {
			var input = jQuery(this);
			var placeholder = input.attr("placeholder");
			
			if (typeof placeholder == 'undefined' || placeholder == false) {
			return;
			}
			
			input.parent().css("position", "relative");
			input.parent().append("<div class='placeholderLabel'>" + placeholder + "</div>");
			var label = input.parent().find(".placeholderLabel");
			
			if (input.val() == "") {
				label.show();
			}
			
			input.keyup(function() {
				label.toggle(input.val() == ""); // show label when input is empty
		
		// because browsers will often fill in a password when the user types an email
		// we need to also update the password field's label
		var passwordField = jQuery(input.parents("form").find("input[type='password']")[0]);
		var passwordLabel = passwordField.parent().find(".placeholderLabel");
		passwordLabel.toggle(passwordField.val() == "");
		});
			
			jQuery(".placeholderLabel").click(function() {
				var label = jQuery(this);
				label.parent().find("input").focus();
			});
			});
		}
		jQuery(document).ready(function() {
			var $ = jQuery;
		var RioTopNav = {};
		
		RioTopNav.updateItemCount = function(count) {
		var $countDisplay = $(".rioItemCountDisplay");
		if ($countDisplay.length == 0) {
		return;
		}
		if (count === 0 || count) {
		$countDisplay.find(".rioItemCountNumber").html(count);
		}
		if (count && count > 0) {
		$countDisplay.show();
		} else {
		$countDisplay.hide();
		}
		};
		
		RioTopNav.pollForItemCount = function() {
		$.ajax({
		url: "/dash/list/count",
		success: function (data){
			RioTopNav.updateItemCount(data);
		},
		complete : function() {
			RioTopNav.queuePollForItemCount()
		}
		});
		}
		
		RioTopNav.queuePollForItemCount = function() {
		if (!window.DashNotifications || !DashNotifications.enabled) {
		setTimeout(RioTopNav.pollForItemCount, 30000);
		}
		};
		
		if ($(".rioItemCountDisplay").length > 0) {
		RioTopNav.queuePollForItemCount();
		}
		window.RioTopNav = RioTopNav;
		if (window.DashNotifications && DashNotifications.enabled) {
		DashNotifications.addListener(function(eventName, eventData){
		if (eventName == "Rio.ListItem.ItemProcessed"
		|| eventName == "Rio.ListItem.ItemDeleted"
		|| eventName == "Rio.ListItem.ItemRestored") {
		RioTopNav.pollForItemCount();
		}
		});
		}
		});
		</script>

	<script language="javascript" type="text/javascript">
		jQuery(window).load(function() {
		resizeCart();
		});
		jQuery(document).ready(function() {
		resizeCart();
		
		// set sign in referrers if unrecognized
		setSignInRefer();
		
		// only submit once for checkout
		jQuery("form").submit(function(event) { jQuery(event.target).find("input[type='submit']").attr("disabled", "disabled"); });
		// display add items popover
		if(jQuery("#showAddItemsPopoverFlag").length > 0) { showAddItemsPopover(); }
		// remove "already in your cart" messaging
		window.parent.jQuery("div.alreadyInYourCartInfo").remove();
		// update add to cart messaging
		if(jQuery("#updateAsin").length > 0) { updateItemDiv(); }
		jQuery("#viewCartAddress #linkForChange").click(function(event) {
		showAddressChange("");
		return false;
		});
		jQuery("audio.dashCartAudio").bind("playing", function (event) {
		var $audioItem = jQuery(event.target);
		var $dashContent = $audioItem.parents("div.dashContent");
		$dashContent.addClass("fadedDashContent");
		});
			
		jQuery("audio.dashCartAudio").bind("ended", function (event) {
		var $audioItem = jQuery(event.target);
		var $dashContent = $audioItem.parents("div.dashContent");
		$dashContent.removeClass("fadedDashContent");
		});
			
		jQuery('.voiceTranscription').live('click', function (event) {
		var $transcription = jQuery(event.target);
		var $dashContent = $transcription.parents("div.dashContent");
		var $audio = $dashContent.find("audio.dashCartAudio").get(0);
		
		// Chrome/Safari don't seem to want to re-play audio unless you load it again.
		$audio.load();
		$audio.play();
		});
		
		attachCartUpdateEventHandlers();
		// update "already in your cart" messaging
		updateAlreadyInYourCartDivs();
		initSlotReservationTimer();
		
		attachMPSelectEventHandlers();
		
		
		});
		function showAddressChange(selectedAddressId) {
		var pathname = window.top.location.pathname;
		var search = window.top.location.search;
		var referer = encodeURIComponent(pathname + search);
		var url = "/ViewCartAddress?referer="+referer+"&externalAddressId="+selectedAddressId;
		jQuery.get(url, function(html) {viewAddressSelectionForm(html);});
		}
		function attachCartUpdateEventHandlers() {
		var allItems = window.parent.jQuery(".smallProduct");
		allItems.each(function() {
		var item = jQuery(this);
		var asin = item.find("input[name='addToCartAsin']").val();
		jQuery(window.parent.jQuery("." + asin + "-asin")).bind("showPastPurchaseTag-" + asin, function() {
		jQuery(this).find("div.pastPurchaseSticker").show();
		});
		});
		}
		function attachMPSelectEventHandlers() {
		jQuery("#mpSelect a").click(function(event) {
		event.preventDefault();
		jQuery("#mpSelect select").toggle();
		resizeCart();
		});
		
		jQuery("#mpSelect").change(function() {
		var url = getUrlWithoutBrowseParameter(parent.location.href, "browseMP=");
		url = getUrlWithoutBrowseParameter(url, "browseZIP=");
		if (url.charAt(url.length - 1) != "&") {
		url += (url.indexOf('?') > -1) ? "&" : "?";
		}
		url += "browseMP=" + jQuery(this).find("select").val();
		parent.location.href = url;
		});
		}
		
		function getUrlWithoutBrowseParameter(fullUrl, pattern) {
		var url = fullUrl;
		var splitURL = url.split(pattern);
		if (splitURL.length > 1) {
		var splitParams = splitURL[1].split("&");
		url = splitURL[0];
		if (splitParams.length > 1) {
		url +=splitParams[1];
		}
		}
		return url;
		}
		function initSlotReservationTimer() {
		var timerWrap = jQuery("#slotResTimerWrap"),
		timestamps = timerWrap.text(),
		timestampsArr = timestamps.split(","),
		expiry = parseInt(timestampsArr[0]),
		currentT = parseInt(timestampsArr[1]),
		timer = jQuery("<span/>").attr("id", "slotReservationTimer"),
				timeLeft = parseInt((expiry - currentT) / (1000 * 60));
				if (timeLeft > 0) {
				timer.append(timeLeft + " minutes");
				timerWrap.empty().append("Checkout within the next ").append(timer).append(" to confirm your delivery time.");
				slotTimerInterval = setInterval(decreaseTimeLeftToSlotExpiry, 1000 * 60);
				timerWrap.show();
				}
				}
				function decreaseTimeLeftToSlotExpiry() {
				var timerSpan = jQuery("#slotReservationTimer"),
				minutes = parseInt(timerSpan.text());
				if (minutes > 1) {
				timerSpan.empty().append((minutes - 1) + " minute" + (minutes > 2 ? "s" : ""));
				} else {
				jQuery("#slotReservationCartInfo").hide();
				clearInterval(slotTimerInterval);
				jQuery("#noSlotSelectedCartInfo").show();
				}
				}
				function resizeCart() {
				var height = document.body.scrollHeight;
				window.parent.resizeCartIframe(height);
				}
				function setSignInRefer() {
				var path = window.parent.location.pathname;
				var params = window.parent.location.search;
				if (path.substring(0,4) == "/str") { path = path.substring(4); }
				jQuery("a.signInLink").each(function() {
				var link = jQuery(this);
				var href = link.attr("href");
				link.attr("href", href+"?signInSuccessUrl="+path+params);
				});
				jQuery("#signInButton").append("<input type='hidden' name='signInSuccessUrl' value='"+encodeURIComponent(path+params)+"'>");
				}
				function updateItemDiv() {
				var asin = jQuery("#updateAsin").attr("value");
				var message = jQuery("#updateMessage").attr("value");
				var messageType = jQuery("#updateType").attr("value");
				
				if (asin != "") {
				var e = window.parent.jQuery('div.itemActions > form > input[name=\'asin\'][value=\'' + asin + '\']');
				
				if (window.parent.jQuery("div.smallProduct").length > 0) {
				e = window.parent.jQuery('div.denseSearchHover > div.item > div.itemActions > form > input[name=\'asin\'][value=\'' + asin + '\']');
				}
				var parentElement = e.parent(),
				posTop = 0,
				posLeft = 0;
				if (window.parent.jQuery("div.densePPItem").length > 0) {
				parentElement = e.parents("div.densePPItem");
				posTop = parentElement.position().top + 55;
				posLeft = parentElement.position().left - 8;
				}
				
				}
				}
				function updateAlreadyInYourCartDivs() {
				//By passing in the iframeContents we can now invoke this method from both inside and outside of the iframe that hosts
				//the shopping cart. We want to be able to invoke this outside of the iframe so that it can be invoked when the search
				//portion of the hybrid page is finished loading.
				var iframeContents = window.parent.jQuery('#shopping-cart').contents();
				var items = jQuery("#cartSection .item", iframeContents).not(":has(.modifiedInNewOrder)");
				var cartInfo = {};
				var cartAsinQtyMap = {};
				items.each(function() {
				var item = jQuery(this);
				var asin = item.find("input[name='asin']").val();
				var qty = item.find(".quantityValue").text();
				var variationalParentAsinInput = item.find("input[name='variationalParentAsin']");
				if(variationalParentAsinInput.length > 0) {
				var variationalParentAsin = variationalParentAsinInput.val();
				}
				cartAsinQtyMap[asin] = qty;
				if (asin != "") {
				var inYourCartDivs = window.parent.jQuery("div.alreadyInYourCart-" + asin);
				if (typeof variationalParentAsin !== 'undefined') {
				var variationDrawerDivs = window.parent.jQuery("#variationDrawer-" + variationalParentAsin);
				if(variationDrawerDivs.length > 0) {
				inYourCartDivs = window.parent.jQuery("div.alreadyInYourCart-" + variationalParentAsin);
				qty = getInCartQuantityForVariationFamily(items, variationDrawerDivs);
				}
				}
				// changed for Yoda search style mock-up
				if (inYourCartDivs.siblings(".alreadyInYourCartSpacer").length) {
				var msg = "IN CART";
				} else {
				var msg = inYourCartDivs.hasClass("short") ? "in cart" : "in your cart";
				}
				for (var i = 0; i < inYourCartDivs.length; i++) {
				var item = window.parent.jQuery("." + asin + "-asin");
				var pastPurchaseSticker = item.find('.pastPurchaseSticker');
				if (qty > 0) {
				pastPurchaseSticker.hide();
				jQuery(inYourCartDivs[i]).html('<div class="alreadyInYourCartInfo" ><strong>' + qty + '</strong> ' + msg + '</div>');
				}
				}
				}
				});
				cartInfo["cartAsinQtyMap"] = cartAsinQtyMap;
				if (typeof(window.parent.cartReloadEvent) == "function") {
				window.parent.cartReloadEvent(cartInfo);
				}
				
				var updateAsin = jQuery("#updateAsin").val();
				var updateMessage = jQuery("#updateMessage").val();
				
				if (jQuery("input[id='updateType']").val() == "warning") {
				updateItemMessage(updateAsin, jQuery("div.messaging").html());
				}
				}
				function getInCartQuantityForVariationFamily(items, variationDrawerDivs) {
				var variationAsins = getVariationAsins(variationDrawerDivs);
				var variationQuantities = getVariationQuantities(items, variationAsins);
				var totalQuantity = 0;
				for (var i = 0; i < variationQuantities.length; i++) {
				totalQuantity += parseInt(variationQuantities[i]);
				}
				return totalQuantity;
				}
				function getVariationAsins(variationDrawerDivs) {
				var variationAsins = {};
				var variationRadios = variationDrawerDivs.find(".variationSelection").find("input");
				for (var i = 0; i < variationRadios.length; i++) {
				variationAsins[variationRadios[i].value] = true;
				}
				return variationAsins;
				}
				function getVariationQuantities(items, variationAsins) {
				var variationQuantities = [];
				items.each(function() {
				var item = jQuery(this);
				var asin = item.find("input[name='asin']").val();
				if (variationAsins[asin]) {
				variationQuantities.push(item.find(".quantityValue").text());
				}
				});
				return variationQuantities;
				}
				function updateItemMessage(asin, message) {
				var hoverDiv = window.parent.jQuery("#itemMessage_" + asin);
				var productDiv = hoverDiv.closest("div.smallProduct");
				
				hoverDiv.html(message);
				hoverDiv.width(productDiv.width() + 20);
				
				var topOffset = -(productDiv.height() / 2) - hoverDiv.height();
				var leftOffset = -(hoverDiv.width() - productDiv.width());
				
				hoverDiv.show();
				hoverDiv.css({top: topOffset, left: leftOffset});
				}
				function showAddItemsPopover() {
				jQuery.get("AddItemMessaging", function(ajax) { cartSuccess(ajax); });
				}
				function cartSuccess(ajax) {
				window.parent.jQuery('#alphaLayer').addClass("disablePage");
				window.parent.jQuery('#alphaLayer').before('<div class="wrapper"><div id="infoBox">' + ajax.responseText + '</div></div>');
				}
				function viewAddressSelectionForm(html) {
				var linkToHide = jQuery("#viewCartAddress #linkForChange");
				linkToHide.hide();
				
				var form = jQuery("#viewCartAddress #addressChangeBlock");
				form.html(html);
				setBoxToShowAfterClose(linkToHide);
				form.show();
				}
			</script>

	<link href="https://images-na.ssl-images-amazon.com/images/G/01/omaha/css/refresh._V1432677347_.css" type="text/css" rel="stylesheet" />

	<script type="text/javascript" src="https://images-na.ssl-images-amazon.com/images/G/01/omaha/js/lightbox._V1396384790_.js"></script>

	<script type="text/javascript" src="https://images-na.ssl-images-amazon.com/images/G/01/omaha/js/refreshToolbar._V1376527512_.js"></script>

	<link rel="stylesheet" type="text/css" href="/css/MyFontsWebfontsKit.css" />

	<link href="https://images-na.ssl-images-amazon.com/images/G/01/omaha/css/refreshCart._V1431106386_.css" type="text/css" rel="stylesheet" />

	<title>Sign In</title>

	<link href="https://images-na.ssl-images-amazon.com/images/G/01/omaha/css/welcome._V1442871299_.css" type="text/css" rel="stylesheet" />

	<script type="text/javascript" src="https://images-na.ssl-images-amazon.com/images/G/01/omaha/js/welcome._V1441330792_.js"></script>